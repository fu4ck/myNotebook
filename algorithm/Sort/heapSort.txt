heap: int[] --->  0....N-1

int lchild(int k){
	return 2*k + 1;
}

int rchild(int k){
	return 2*k + 2;
}

int parent(int k){
	return (k-1)/2;
}

void siftUp(int k){
	while(parent(k) >=0 && heap[k] > heap[parent(k)]){
		swap(heap[k], heap[parent(k)]);
		k = parent(k);
	}
}

void siftDown(int k, int N){
	while(lchild(k) < N){
		int child = lchild(k);
		if(child + 1 < N && heap[child] < heap[child + 1]){
			child++;
		}
		if(heap[k] > heap[child]){
			break;
		}
		swap(heap[k], heap[child]);
		k = child;
	}
}

void hsort(int[] arr){
	heap = arr;
	int N = arr.length;
	//从非叶子点开始逐个进行shiftDown操作
	for(int k=(N-1)/2; k>=0; k--){
		shiftDown(k);
	}
	while(N > 0){
		swap(heap[0], heap[N-1]);
		N--;
		shiftDown(0, N);
	}
}