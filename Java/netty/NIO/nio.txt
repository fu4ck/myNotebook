传统IO与NIO比较


传送IO特点
阻塞点
server.accept();
inputStream.read(bytes);

单线程情况下只能有一个客户端


用线程池可以有多个客户端连接，但是非常消耗性能


=======================分割线==========================

NIO的特点

ServerSocketChannel	ServerSocket

SocketChannel		Socket

Selector

SelectionKey

NIO的一些疑问

1、客户端关闭的时候会抛出异常，死循环
解决方案
		int read = channel.read(buffer);
		if(read > 0){
			byte[] data = buffer.array();
			String msg = new String(data).trim();
			System.out.println("服务端收到信息：" + msg);
			
			//回写数据
			ByteBuffer outBuffer = ByteBuffer.wrap("好的".getBytes());
			channel.write(outBuffer);// 将消息回送给客户端
		}else{
			System.out.println("客户端关闭");
			key.cancel();
		}

2、selector.select();阻塞，那为什么说nio是非阻塞的IO？

	selector.select()
	selector.select(1000);不阻塞
	selector.wakeup();也可以唤醒selector
	selector.selectNow();也可以立马返还，视频里忘了讲了，哈，这里补上


3、SelectionKey.OP_WRITE是代表什么意思

OP_WRITE表示底层缓冲区是否有空间，是则响应返还true